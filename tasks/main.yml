- name: Get GPU information
  shell: "lspci | grep VGA"
  register: gfxinfo
  tags: gfx

- name: Check for installed NVIDIA drivers
  shell: "apt list --installed"
  register: nv_installed
  ignore_errors: true
  tags: gfx

- name: Set install flag
  set_fact:
    install: true
  when: gfxinfo.stdout is search('Virtio') or (gfxinfo.stdout is search('NVIDIA') and nv_installed.stdout is not search('nvidia-driver'))
  tags: gfx

- name: Check if Secure Boot is enabled
  shell: "mokutil --sb-state"
  register: sb_state
  ignore_errors: true
  tags: gfx

- name: Set secure_boot flag
  set_fact:
    secure_boot: "{{ 'true' if 'SecureBoot enabled' in sb_state.stdout else 'false' }}"
  tags: gfx

- name: Update apt cache
  apt:
    update_cache: yes
  when: install
  tags: gfx

- name: Copy expect script for NVIDIA driver installation
  copy:
    src: install-nvidia-drivers.exp
    dest: /run/install-nvidia-drivers.exp
  when: install and secure_boot
  tags: gfx

- name: Install NVIDIA DKMS drivers with Secure Boot enabled
  command: expect -d /run/install-nvidia-drivers.exp
  when: install and secure_boot
  tags: gfx

- name: Install NVIDIA DKMS drivers with Secure Boot disabled
  apt:
    pkg:
      - nvidia-driver-{{ nvidia_driver_version }}
    install_recommends: yes
    update_cache: no
  when: install and not secure_boot
  tags: gfx

- name: waiting for dpkg to finish
  shell: while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 1; done;
  when: install
  tags: gfx

- name: Install NVIDIA kernel items
  apt:
    pkg:
      - linux-modules-nvidia-{{ nvidia_driver_version }}-{{ ansible_kernel }}
      - linux-modules-nvidia-{{ nvidia_driver_version }}-generic-hwe-{{ ansible_distribution_version}}
      - linux-objects-nvidia-{{ nvidia_driver_version }}-{{ ansible_kernel }}
      - linux-signatures-nvidia-{{ ansible_kernel }}
      - nvidia-kernel-source-{{ nvidia_driver_version }}
    install_recommends: yes
    update_cache: no
  when: install
  tags: gfx

- name: configure power management for nvidia
  copy:
    dest: /etc/default/grub.d/nvidia-power.cfg
    content: 'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT quiet splash pcie_aspm=off usbcore.autosuspend=-1"'
    owner: root
    group: root
    mode: '0644'
  when: install
  tags: gfx

- name: Remove "--no-persistence-mode" from nvidia-persistenced service
  replace:
    path: /usr/lib/systemd/system/nvidia-persistenced.service
    regexp: ' --no-persistence-mode'
    replace: ''
  when: install
  tags: gfx

- name: update grub
  command: update-grub
  when: install
  tags: gfx

- name: set nvidia prime profile to nvidia
  command: prime-select nvidia
  when: install
  tags: gfx

- name: install nvidia cuda development and toolkit
  apt:
    pkg:
      - nvidia-cuda-dev
      - nvidia-cuda-toolkit
    install_recommends: yes
    update_cache: no
  when: install
  tags: gfx

- name: Remove Nouveau driver
  apt:
    pkg:
      - xserver-xorg-video-nouveau
    state: absent
  when: install
  tags: gfx

- name: Remove unused packages
  apt:
    autoclean: yes
  when: install
  tags: gfx

- name: Reinstall required Xorg video packages
  apt:
    pkg:
      - libxatracker2
      - libxvmc1
      - xserver-xorg-video-amdgpu
      - xserver-xorg-video-ati
      - xserver-xorg-video-fbdev
      - xserver-xorg-video-intel
      - xserver-xorg-video-qxl
      - xserver-xorg-video-radeon
      - xserver-xorg-video-vesa
    install_recommends: true
  when: install
  tags: gfx